steps:
  # This step deploys the new version of our container image
  # in the hello-cloudbuild Kubernetes Engine cluster.
  - name: 'gcr.io/cloud-builders/kubectl'
    id: Deploy
    args:
      - 'apply'
      - '-f'
      - 'kubernetes.yaml'
    env:
      - 'CLOUDSDK_COMPUTE_ZONE=europe-west1-b'
      - 'CLOUDSDK_CONTAINER_CLUSTER=develop-cluster'

  - name: gcr.io/cloud-builders/gcloud
    entrypoint: 'bash'
    args: [ '-c', 'gcloud secrets versions access latest --secret=build-github-ssh-key > /root/.ssh/id_github' ]
    volumes:
      - name: 'ssh'
        path: /root/.ssh

  - name: 'gcr.io/cloud-builders/git'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        chmod 600 /root/.ssh/id_github
        cat <<EOF >/root/.ssh/config
        Hostname github.com
        IdentityFile /root/.ssh/id_github
        EOF
        ssh-keyscan -t rsa github.com > /root/.ssh/known_hosts
    volumes:
      - name: 'ssh'
        path: /root/.ssh

  # This step copies the applied manifest to the production branch
  # The COMMIT_SHA variable is automatically
  # replaced by Cloud Build.
  - name: 'gcr.io/cloud-builders/git'
    id: Copy to production branch
    entrypoint: /bin/sh
    args:
      - '-c'
      - |
        set -x && \
        ls -l . && \
        git config user.email $(gcloud auth list --filter=status:ACTIVE --format='value(account)') && \
        git fetch origin production && git checkout production && \
        git checkout $COMMIT_SHA kubernetes.yaml && \
        # Commit the kubernetes.yaml file with a descriptive commit message
        git commit -m "Manifest from commit $COMMIT_SHA $(git log --format=%B -n 1 $COMMIT_SHA)" && \
        # Push the changes back to Cloud Source Repository
        git push origin production
    volumes:
      - name: 'ssh'
        path: /root/.ssh
